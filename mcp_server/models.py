# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:29:04+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ActivatePipelineOutput(BaseModel):
    pass


class AddTagsOutput(BaseModel):
    pass


class DeactivatePipelineOutput(BaseModel):
    pass


class InternalServiceError(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class OperatorType(Enum):
    EQ = 'EQ'
    REF_EQ = 'REF_EQ'
    LE = 'LE'
    GE = 'GE'
    BETWEEN = 'BETWEEN'


class PipelineDeletedException(RootModel[Any]):
    root: Any


class PipelineNotFoundException(RootModel[Any]):
    root: Any


class RemoveTagsOutput(BaseModel):
    pass


class SetTaskStatusOutput(BaseModel):
    pass


class TaskNotFoundException(RootModel[Any]):
    root: Any


class TaskStatus(Enum):
    FINISHED = 'FINISHED'
    FAILED = 'FAILED'
    FALSE = 'FALSE'


class AttributeNameString(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class AttributeValueString(RootModel[constr(min_length=0, max_length=10240)]):
    root: constr(min_length=0, max_length=10240)


class Boolean(RootModel[bool]):
    root: bool


class CancelActive(RootModel[bool]):
    root: bool


class ErrorMessage(RootModel[str]):
    root: str


class FieldNameString(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class FieldStringValue(RootModel[constr(min_length=0, max_length=10240)]):
    root: constr(min_length=0, max_length=10240)


class Id(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class IdList(RootModel[List[Id]]):
    root: List[Id]


class Int(RootModel[int]):
    root: int


class LongString(RootModel[constr(min_length=0, max_length=20971520)]):
    root: constr(min_length=0, max_length=20971520)


class String(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class StringList(RootModel[List[String]]):
    root: List[String]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TaskId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Timestamp(RootModel[datetime]):
    root: datetime


class ValidationMessage(RootModel[constr(min_length=0, max_length=10000)]):
    root: constr(min_length=0, max_length=10000)


class ValidationMessages(RootModel[List[ValidationMessage]]):
    root: List[ValidationMessage]


class XAmzTarget(Enum):
    DataPipeline_ActivatePipeline = 'DataPipeline.ActivatePipeline'


class XAmzTarget1(Enum):
    DataPipeline_AddTags = 'DataPipeline.AddTags'


class XAmzTarget2(Enum):
    DataPipeline_CreatePipeline = 'DataPipeline.CreatePipeline'


class XAmzTarget3(Enum):
    DataPipeline_DeactivatePipeline = 'DataPipeline.DeactivatePipeline'


class XAmzTarget4(Enum):
    DataPipeline_DeletePipeline = 'DataPipeline.DeletePipeline'


class XAmzTarget5(Enum):
    DataPipeline_DescribeObjects = 'DataPipeline.DescribeObjects'


class XAmzTarget6(Enum):
    DataPipeline_DescribePipelines = 'DataPipeline.DescribePipelines'


class XAmzTarget7(Enum):
    DataPipeline_EvaluateExpression = 'DataPipeline.EvaluateExpression'


class XAmzTarget8(Enum):
    DataPipeline_GetPipelineDefinition = 'DataPipeline.GetPipelineDefinition'


class XAmzTarget9(Enum):
    DataPipeline_ListPipelines = 'DataPipeline.ListPipelines'


class XAmzTarget10(Enum):
    DataPipeline_PollForTask = 'DataPipeline.PollForTask'


class XAmzTarget11(Enum):
    DataPipeline_PutPipelineDefinition = 'DataPipeline.PutPipelineDefinition'


class XAmzTarget12(Enum):
    DataPipeline_QueryObjects = 'DataPipeline.QueryObjects'


class XAmzTarget13(Enum):
    DataPipeline_RemoveTags = 'DataPipeline.RemoveTags'


class XAmzTarget14(Enum):
    DataPipeline_ReportTaskProgress = 'DataPipeline.ReportTaskProgress'


class XAmzTarget15(Enum):
    DataPipeline_ReportTaskRunnerHeartbeat = 'DataPipeline.ReportTaskRunnerHeartbeat'


class XAmzTarget16(Enum):
    DataPipeline_SetStatus = 'DataPipeline.SetStatus'


class XAmzTarget17(Enum):
    DataPipeline_SetTaskStatus = 'DataPipeline.SetTaskStatus'


class XAmzTarget18(Enum):
    DataPipeline_ValidatePipelineDefinition = 'DataPipeline.ValidatePipelineDefinition'


class CreatePipelineOutput(BaseModel):
    pipelineId: Id


class DeactivatePipelineInput(BaseModel):
    cancelActive: Optional[CancelActive] = None
    pipelineId: Id


class DeletePipelineInput(BaseModel):
    pipelineId: Id


class DescribeObjectsInput(BaseModel):
    evaluateExpressions: Optional[Boolean] = None
    marker: Optional[String] = None
    objectIds: IdList
    pipelineId: Id


class DescribePipelinesInput(BaseModel):
    pipelineIds: IdList


class EvaluateExpressionInput(BaseModel):
    expression: LongString
    objectId: Id
    pipelineId: Id


class EvaluateExpressionOutput(BaseModel):
    evaluatedExpression: LongString


class FieldModel(BaseModel):
    key: FieldNameString
    refValue: Optional[FieldNameString] = None
    stringValue: Optional[FieldStringValue] = None


class GetPipelineDefinitionInput(BaseModel):
    pipelineId: Id
    version: Optional[String] = None


class InstanceIdentity(BaseModel):
    document: Optional[String] = None
    signature: Optional[String] = None


class ListPipelinesInput(BaseModel):
    marker: Optional[String] = None


class Operator(BaseModel):
    type: Optional[OperatorType] = None
    values: Optional[StringList] = None


class ParameterAttribute(BaseModel):
    key: AttributeNameString
    stringValue: AttributeValueString


class ParameterAttributeList(RootModel[List[ParameterAttribute]]):
    root: List[ParameterAttribute]


class ParameterObject(BaseModel):
    attributes: ParameterAttributeList
    id: FieldNameString


class ParameterObjectList(RootModel[List[ParameterObject]]):
    root: List[ParameterObject]


class ParameterValue(BaseModel):
    id: FieldNameString
    stringValue: FieldStringValue


class ParameterValueList(RootModel[List[ParameterValue]]):
    root: List[ParameterValue]


class PipelineIdName(BaseModel):
    id: Optional[Id] = None
    name: Optional[Id] = None


class PollForTaskInput(BaseModel):
    hostname: Optional[Id] = None
    instanceIdentity: Optional[InstanceIdentity] = None
    workerGroup: String


class QueryObjectsOutput(BaseModel):
    hasMoreResults: Optional[Boolean] = None
    ids: Optional[IdList] = None
    marker: Optional[String] = None


class RemoveTagsInput(BaseModel):
    pipelineId: Id
    tagKeys: StringList


class ReportTaskProgressOutput(BaseModel):
    canceled: Boolean


class ReportTaskRunnerHeartbeatInput(BaseModel):
    hostname: Optional[Id] = None
    taskrunnerId: Id
    workerGroup: Optional[String] = None


class ReportTaskRunnerHeartbeatOutput(BaseModel):
    terminate: Boolean


class Selector(BaseModel):
    fieldName: Optional[String] = None
    operator: Optional[Operator] = None


class SelectorList(RootModel[List[Selector]]):
    root: List[Selector] = Field(
        ...,
        description='The list of Selectors that define queries on individual fields.',
    )


class SetStatusInput(BaseModel):
    objectIds: IdList
    pipelineId: Id
    status: String


class SetTaskStatusInput(BaseModel):
    errorId: Optional[String] = None
    errorMessage: Optional[ErrorMessage] = None
    errorStackTrace: Optional[String] = None
    taskId: TaskId
    taskStatus: TaskStatus


class Tag(BaseModel):
    key: TagKey
    value: TagValue


class ValidationError(BaseModel):
    errors: Optional[ValidationMessages] = None
    id: Optional[Id] = None


class ValidationErrors(RootModel[List[ValidationError]]):
    root: List[ValidationError]


class ValidationWarning(BaseModel):
    id: Optional[Id] = None
    warnings: Optional[ValidationMessages] = None


class ValidationWarnings(RootModel[List[ValidationWarning]]):
    root: List[ValidationWarning]


class FieldList(RootModel[List[FieldModel]]):
    root: List[FieldModel]


class PipelineList(RootModel[List[PipelineIdName]]):
    root: List[PipelineIdName]


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=10, min_length=0)


class ActivatePipelineInput(BaseModel):
    parameterValues: Optional[ParameterValueList] = None
    pipelineId: Id
    startTimestamp: Optional[Timestamp] = None


class AddTagsInput(BaseModel):
    pipelineId: Id
    tags: TagList


class CreatePipelineInput(BaseModel):
    description: Optional[String] = None
    name: Id
    tags: Optional[TagList] = None
    uniqueId: Id


class ListPipelinesOutput(BaseModel):
    hasMoreResults: Optional[Boolean] = None
    marker: Optional[String] = None
    pipelineIdList: PipelineList


class PipelineDescription(BaseModel):
    description: Optional[String] = None
    fields: FieldList
    name: Id
    pipelineId: Id
    tags: Optional[TagList] = None


class PipelineDescriptionList(RootModel[List[PipelineDescription]]):
    root: List[PipelineDescription]


class PipelineObject(BaseModel):
    fields: FieldList
    id: Id
    name: Id


class PipelineObjectList(RootModel[List[PipelineObject]]):
    root: List[PipelineObject]


class PipelineObjectMap(RootModel[Optional[Dict[str, PipelineObject]]]):
    root: Optional[Dict[str, PipelineObject]] = None


class PutPipelineDefinitionInput(BaseModel):
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None
    pipelineId: Id
    pipelineObjects: PipelineObjectList


class PutPipelineDefinitionOutput(BaseModel):
    errored: Boolean
    validationErrors: Optional[ValidationErrors] = None
    validationWarnings: Optional[ValidationWarnings] = None


class Query(BaseModel):
    selectors: Optional[SelectorList] = None


class QueryObjectsInput(BaseModel):
    limit: Optional[Int] = None
    marker: Optional[String] = None
    pipelineId: Id
    query: Optional[Query] = None
    sphere: String


class ReportTaskProgressInput(BaseModel):
    fields: Optional[FieldList] = None
    taskId: TaskId


class TaskObject(BaseModel):
    attemptId: Optional[Id] = None
    objects: Optional[PipelineObjectMap] = None
    pipelineId: Optional[Id] = None
    taskId: Optional[TaskId] = None


class ValidatePipelineDefinitionInput(BaseModel):
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None
    pipelineId: Id
    pipelineObjects: PipelineObjectList


class ValidatePipelineDefinitionOutput(BaseModel):
    errored: Boolean
    validationErrors: Optional[ValidationErrors] = None
    validationWarnings: Optional[ValidationWarnings] = None


class DescribeObjectsOutput(BaseModel):
    hasMoreResults: Optional[Boolean] = None
    marker: Optional[String] = None
    pipelineObjects: PipelineObjectList


class DescribePipelinesOutput(BaseModel):
    pipelineDescriptionList: PipelineDescriptionList


class GetPipelineDefinitionOutput(BaseModel):
    parameterObjects: Optional[ParameterObjectList] = None
    parameterValues: Optional[ParameterValueList] = None
    pipelineObjects: Optional[PipelineObjectList] = None


class PollForTaskOutput(BaseModel):
    taskObject: Optional[TaskObject] = None
